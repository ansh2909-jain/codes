import os
from dotenv import load_dotenv
import requests
from requests.auth import HTTPBasicAuth
 
base_url = 'http://127.0.0.1:8000'
load_dotenv()
VALID_USERNAME = os.getenv("username")
VALID_PASSWORD = os.getenv("password1")
def get_base_endpoint():
    try:
        endpoint = '/'
        complete_url = base_url + endpoint
        response = requests.get(complete_url, auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD), allow_redirects=True)
 
        print(f"Final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Redirect successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
def get_hello_endpoint():
    try:
        endpoint = '/hello'
        complete_url = base_url + endpoint
        response = requests.get(complete_url, auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD), allow_redirects=True)
 
        print(f"final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Redirect successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status cide: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
 
def get_goodbye_endpoint():
    try:
        endpoint = '/goodbye'
        complete_url = base_url + endpoint
        response = requests.get(complete_url, auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD), allow_redirects=True)
 
        print(f"final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Redirect successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status cide: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
def get_all_students():
    try:
        endpoint = '/students/'
        complete_url = base_url + endpoint
        response = requests.get(complete_url, auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD), allow_redirects=True)
 
        print(f"final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Redirect successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status cide: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
def get_student_by_id():
    try:
        student_id = int(input("enter student ID: "))
        endpoint = f"/{student_id}"
        complete_url = base_url + endpoint
        response = requests.get(complete_url, auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD), allow_redirects=True)
 
        print(f"final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Redirect successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status cide: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
def create_student():
    firstname = input("Enter your first name: ")
    lastname = input("Enter your last name: ")
    age = int(input("Enter your age: "))
    email = input("Enter your _@gmail.com Email: ")
    bio = input("Enter your Bio: ")
 
    payload = {
        'firstname': f'{firstname}',
        'lastname': f'{lastname}',
        'age': f'{age}',
        'email': f'{email}',
        'bio': f'{bio}'
    }
 
    try:
        endpoint = '/create'
        complete_url = base_url + endpoint
        response = requests.post(
            complete_url,
            auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD),
            data=payload,
            allow_redirects=True
        )
 
        print(f"Final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Request successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
def edit_student():
    student_id = int(input("Enter the id of student that needs to be edited: "))
    firstname = input("Enter your first name: ")
    lastname = input("Enter your last name: ")
    age = int(input("Enter your age: "))
    email = input("Enter your _@gmail.com Email: ")
    bio = input("Enter your Bio: ")
 
    payload = {
        'firstname': firstname,
        'lastname': lastname,
        'age': str(age),
        'email': email,
        'bio': bio
    }
 
    try:
        endpoint = f'/{student_id}/edit'
        complete_url = base_url + endpoint
        response = requests.post(
            complete_url,
            auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD),
            data=payload,
            allow_redirects=True
        )
 
        print(f"Final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Request successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 
def delete_student():
    student_id = int(input("Enter the ID of the student to delete: "))
 
    try:
        endpoint = f'/{student_id}/delete'
        complete_url = base_url + endpoint
        response = requests.delete(
            complete_url,
            auth=HTTPBasicAuth(VALID_USERNAME, VALID_PASSWORD),
            allow_redirects=True
        )
 
        print(f"Final URL after redirect: {response.url}")
        print(f"Status code: {response.status_code}")
 
        if response.status_code == 200:
            print("Delete request successful. Response content:")
            print(response.text)
        else:
            print(f"Unexpected status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error calling API: {e}")
 
 